!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.5.4	//
MD_CONTAINER	./elements.h	41;"	d
MD_CONTAINER_BEGIN	./elements.h	22;"	d
MD_CONTROL	./elements.h	94;"	d
MD_ELEMENT	./elements.h	33;"	d
MD_KEYSIG	./elements.h	160;"	d
MD_KEYTOUCH	./elements.h	111;"	d
MD_MAP	./elements.h	151;"	d
MD_META	./elements.h	144;"	d
MD_NOTE	./elements.h	77;"	d
MD_PART	./elements.h	85;"	d
MD_PITCH	./elements.h	127;"	d
MD_PRESSURE	./elements.h	119;"	d
MD_PROGRAM	./elements.h	102;"	d
MD_ROOT	./elements.h	51;"	d
MD_SMPTEOFFSET	./elements.h	202;"	d
MD_SYSEX	./elements.h	137;"	d
MD_TEMPO	./elements.h	179;"	d
MD_TEMPOMAP	./elements.h	66;"	d
MD_TEXT	./elements.h	190;"	d
MD_TIMESIG	./elements.h	171;"	d
MD_TRACK	./elements.h	59;"	d
MD_TYPE_CONTAINER	./elements.h	251;"	d
MD_TYPE_CONTROL	./elements.h	253;"	d
MD_TYPE_ELEMENT	./elements.h	243;"	d
MD_TYPE_KEYSIG	./elements.h	249;"	d
MD_TYPE_KEYTOUCH	./elements.h	236;"	d
MD_TYPE_MAP	./elements.h	252;"	d
MD_TYPE_META	./elements.h	240;"	d
MD_TYPE_NOTE	./elements.h	242;"	d
MD_TYPE_PART	./elements.h	234;"	d
MD_TYPE_PITCH	./elements.h	238;"	d
MD_TYPE_PRESSURE	./elements.h	241;"	d
MD_TYPE_PROGRAM	./elements.h	239;"	d
MD_TYPE_ROOT	./elements.h	235;"	d
MD_TYPE_SMPTEOFFSET	./elements.h	244;"	d
MD_TYPE_SYSEX	./elements.h	247;"	d
MD_TYPE_TEMPO	./elements.h	245;"	d
MD_TYPE_TEMPOMAP	./elements.h	246;"	d
MD_TYPE_TEXT	./elements.h	237;"	d
MD_TYPE_TIMESIG	./elements.h	250;"	d
MD_TYPE_TRACK	./elements.h	248;"	d
MD_WALK_ALL	./md.h	20;"	d
MD_WALK_EMPTY	./md.h	25;"	d
MD_WALK_END	./md.h	24;"	d
MD_WALK_START	./md.h	23;"	d
MIDI_CHANNEL_AFTERTOUCH	./midi.h	26;"	d
MIDI_CONTROLER	./midi.h	24;"	d
MIDI_HEAD_MAGIC	./midi.h	54;"	d
MIDI_KEY_AFTERTOUCH	./midi.h	23;"	d
MIDI_MAX_TEXT_TYPE	./midi.h	52;"	d
MIDI_META	./midi.h	29;"	d
MIDI_META_CHANNEL	./midi.h	42;"	d
MIDI_META_COPYRIGHT	./midi.h	35;"	d
MIDI_META_CUE	./midi.h	40;"	d
MIDI_META_EOT	./midi.h	44;"	d
MIDI_META_INSTRUMENT	./midi.h	37;"	d
MIDI_META_KEY	./midi.h	48;"	d
MIDI_META_LYRIC	./midi.h	38;"	d
MIDI_META_MARKER	./midi.h	39;"	d
MIDI_META_PORT	./midi.h	43;"	d
MIDI_META_PROP	./midi.h	49;"	d
MIDI_META_SEQUENCE	./midi.h	32;"	d
MIDI_META_SMPTE_OFFSET	./midi.h	46;"	d
MIDI_META_TEMPO	./midi.h	45;"	d
MIDI_META_TEXT	./midi.h	34;"	d
MIDI_META_TIME	./midi.h	47;"	d
MIDI_META_TRACKNAME	./midi.h	36;"	d
MIDI_NOTE_OFF	./midi.h	21;"	d
MIDI_NOTE_ON	./midi.h	22;"	d
MIDI_PATCH	./midi.h	25;"	d
MIDI_PITCH_WHEEL	./midi.h	27;"	d
MIDI_SYSEX	./midi.h	28;"	d
MIDI_TRACK_MAGIC	./midi.h	55;"	d
bottom	./elements.h	/^	short bottom;	\/* 'bottom' of timesignature *\/$/;"	m	struct:timesigElement
chunk_count	./midiread.c	/^	int  chunk_count;	\/* Count within current chunk *\/$/;"	m	struct:midistate	file:
chunk_size	./midiread.c	/^	int  chunk_size;	\/* Size of current chunk *\/$/;"	m	struct:midistate	file:
clocks	./elements.h	/^	short clocks;	\/* Can't remember what this is *\/$/;"	m	struct:timesigElement
containerElement	./elements.h	/^struct containerElement {$/;"	s
control	./elements.h	/^	short  control;	\/* Controller number *\/$/;"	m	struct:controlElement
controlElement	./elements.h	/^struct controlElement {$/;"	s
count	./md.h	/^	int  count;	\/* Current position count *\/$/;"	m	struct:trackPos
currel	./md.h	/^	struct element **currel; \/* Pointer to current position *\/$/;"	m	struct:trackPos
current_time	./midiread.c	/^	int  current_time;	\/* Current midi time *\/$/;"	m	struct:midistate	file:
data	./elements.h	/^	unsigned char *data;$/;"	m	struct:sysexElement
device	./midiread.c	/^	int  device;	\/* Midi device number *\/$/;"	m	struct:midistate	file:
device_channel	./elements.h	/^	short device_channel;	\/* Device\/channel for this element *\/$/;"	m	struct:element
element	./elements.h	/^struct element {$/;"	s
element_time	./elements.h	/^	guint32 element_time;	\/* Time for this element *\/$/;"	m	struct:element
elements	./elements.h	/^	GPtrArray *elements;	\/* List of elements *\/$/;"	m	struct:containerElement
endtime	./md.h	/^	unsigned long endtime;	\/* End time *\/$/;"	m	struct:sequenceState
final_time	./elements.h	/^	guint32 final_time;$/;"	m	struct:partElement
final_time	./elements.h	/^	guint32 final_time;$/;"	m	struct:trackElement
finish_note	./midiread.c	/^finish_note(struct midistate *msp, int note, int vel)$/;"	f	file:
format	./elements.h	/^	short  format;	\/* Midi format *\/$/;"	m	struct:rootElement
frames	./elements.h	/^	short  frames;$/;"	m	struct:smpteoffsetElement
handle_meta	./midiread.c	/^handle_meta(struct midistate *msp, int type, unsigned char *data)$/;"	f	file:
handle_status	./midiread.c	/^handle_status(struct midistate *msp, struct trackElement *track, int status)$/;"	f	file:
hours	./elements.h	/^	short  hours;$/;"	m	struct:smpteoffsetElement
iscontainer	./mdutil.c	/^iscontainer(struct element *el)$/;"	f
key	./elements.h	/^	char key;		\/* Key signature *\/$/;"	m	struct:keysigElement
keysigElement	./elements.h	/^struct keysigElement {$/;"	s
keytouchElement	./elements.h	/^struct keytouchElement {$/;"	s
len	./md.h	/^	int  len;	\/* Total length of this container element *\/$/;"	m	struct:trackPos
length	./elements.h	/^	int    length;$/;"	m	struct:noteElement
length	./elements.h	/^	int  length; \/* length of the text (including a null?) *\/$/;"	m	struct:textElement
length	./elements.h	/^	int  length;$/;"	m	struct:sysexElement
mapElement	./elements.h	/^struct mapElement {$/;"	s
md_add	./elements.c	/^md_add(struct containerElement *c, struct element *e)$/;"	f
md_check_cast	./elements.c	/^md_check_cast(struct element *el, int type)$/;"	f
md_container_init	./elements.c	/^md_container_init(struct containerElement *e)$/;"	f	file:
md_container_new	./elements.c	/^md_container_new()$/;"	f
md_control_new	./elements.c	/^md_control_new(short control, short value)$/;"	f
md_element_new	./elements.c	/^md_element_new()$/;"	f
md_free	./elements.c	/^md_free(struct element *el)$/;"	f
md_keysig_new	./elements.c	/^md_keysig_new(short key, short minor)$/;"	f
md_keytouch_new	./elements.c	/^md_keytouch_new(int note, int vel)$/;"	f
md_map_new	./elements.c	/^md_map_new()$/;"	f
md_meta_new	./elements.c	/^md_meta_new()$/;"	f
md_note_new	./elements.c	/^md_note_new(short note, short vel, int length)$/;"	f
md_part_new	./elements.c	/^md_part_new(void)$/;"	f
md_pitch_new	./elements.c	/^md_pitch_new(int val)$/;"	f
md_pressure_new	./elements.c	/^md_pressure_new(int vel)$/;"	f
md_program_new	./elements.c	/^md_program_new(int program)$/;"	f
md_root_new	./elements.c	/^md_root_new(void)$/;"	f
md_sequence_end	./mdutil.c	/^md_sequence_end(struct sequenceState *seq)$/;"	f
md_sequence_end_time	./mdutil.c	/^md_sequence_end_time(struct sequenceState *seq)$/;"	f
md_sequence_init	./mdutil.c	/^md_sequence_init(struct rootElement *root)$/;"	f
md_sequence_next	./mdutil.c	/^md_sequence_next(struct sequenceState *seq)$/;"	f
md_smpteoffset_new	./elements.c	/^md_smpteoffset_new(short hours, short minutes, short seconds, short frames, $/;"	f
md_sysex_new	./elements.c	/^md_sysex_new(int status, unsigned char *data, int len)$/;"	f
md_tempo_new	./elements.c	/^md_tempo_new(int m)$/;"	f
md_tempomap_new	./elements.c	/^md_tempomap_new()$/;"	f
md_text_new	./elements.c	/^md_text_new(int type, char *text)$/;"	f
md_timesig_new	./elements.c	/^md_timesig_new(short top, short bottom, short clocks, short n32pq)$/;"	f
md_track_new	./elements.c	/^md_track_new(void)$/;"	f
md_walk	./mdutil.c	/^md_walk(struct containerElement *c, walkFunc fn, void *arg, int flags)$/;"	f
metaElement	./elements.h	/^struct metaElement {$/;"	s
micro_tempo	./elements.h	/^	int  micro_tempo;	\/* The tempo in microsec per quarter note *\/$/;"	m	struct:tempoElement
midi_read	./midiread.c	/^midi_read(xmms_xform_t *xform)$/;"	f
midistate	./midiread.c	/^struct midistate {$/;"	s	file:
minor	./elements.h	/^	char minor;		\/* Is this a minor key or not *\/$/;"	m	struct:keysigElement
minutes	./elements.h	/^	short  minutes;$/;"	m	struct:smpteoffsetElement
n32pq	./elements.h	/^	short n32pq;	\/* Thirtysecond notes per quarter *\/$/;"	m	struct:timesigElement
name	./elements.h	/^	char *name;	\/* Type as text *\/$/;"	m	struct:textElement
nmerge	./md.h	/^	int  nmerge;	\/* Number of tracks in trackPos to merge *\/$/;"	m	struct:sequenceState
note	./elements.h	/^	int  note;$/;"	m	struct:keytouchElement
note	./elements.h	/^	short  note;$/;"	m	struct:noteElement
noteElement	./elements.h	/^struct noteElement {$/;"	s
notes	./midiread.c	/^	GPtrArray *notes;	\/* Currently on notes *\/$/;"	m	struct:midistate	file:
offvel	./elements.h	/^	short  offvel;	\/* Note Off velocity *\/$/;"	m	struct:noteElement
parent	./elements.h	/^	struct containerElement parent;$/;"	m	struct:partElement
parent	./elements.h	/^	struct containerElement parent;$/;"	m	struct:rootElement
parent	./elements.h	/^	struct containerElement parent;$/;"	m	struct:tempomapElement
parent	./elements.h	/^	struct containerElement parent;$/;"	m	struct:trackElement
parent	./elements.h	/^	struct element parent;$/;"	m	struct:containerElement
parent	./elements.h	/^	struct element parent;$/;"	m	struct:controlElement
parent	./elements.h	/^	struct element parent;$/;"	m	struct:keytouchElement
parent	./elements.h	/^	struct element parent;$/;"	m	struct:metaElement
parent	./elements.h	/^	struct element parent;$/;"	m	struct:noteElement
parent	./elements.h	/^	struct element parent;$/;"	m	struct:pitchElement
parent	./elements.h	/^	struct element parent;$/;"	m	struct:pressureElement
parent	./elements.h	/^	struct element parent;$/;"	m	struct:programElement
parent	./elements.h	/^	struct element parent;$/;"	m	struct:smpteoffsetElement
parent	./elements.h	/^	struct element parent;$/;"	m	struct:sysexElement
parent	./elements.h	/^	struct element parent;$/;"	m	struct:textElement
parent	./elements.h	/^	struct mapElement parent;$/;"	m	struct:keysigElement
parent	./elements.h	/^	struct mapElement parent;$/;"	m	struct:tempoElement
parent	./elements.h	/^	struct mapElement parent;$/;"	m	struct:timesigElement
parent	./elements.h	/^	struct metaElement parent;$/;"	m	struct:mapElement
partElement	./elements.h	/^struct partElement {$/;"	s
pitch	./elements.h	/^	int  pitch;$/;"	m	struct:pitchElement
pitchElement	./elements.h	/^struct pitchElement {$/;"	s
port	./midiread.c	/^	int  port;		\/* Midi port number *\/$/;"	m	struct:midistate	file:
pressureElement	./elements.h	/^struct pressureElement {$/;"	s
program	./elements.h	/^	int  program;	\/* Program number *\/$/;"	m	struct:programElement
programElement	./elements.h	/^struct programElement {$/;"	s
put_back	./midiread.c	/^put_back(struct midistate *msp, char c)$/;"	f	file:
read_data	./midiread.c	/^read_data(struct midistate *msp, int length)$/;"	f	file:
read_head	./midiread.c	/^read_head(struct midistate *msp)$/;"	f	file:
read_int	./midiread.c	/^read_int(struct midistate *msp, int n)$/;"	f	file:
read_track	./midiread.c	/^read_track(struct midistate *msp)$/;"	f	file:
read_var	./midiread.c	/^read_var(struct midistate *msp)$/;"	f	file:
root	./md.h	/^	struct rootElement *root; \/* Root to be returned first *\/$/;"	m	struct:sequenceState
rootElement	./elements.h	/^struct rootElement {$/;"	s
save_note	./midiread.c	/^save_note(struct midistate *msp, int note, int vel)$/;"	f	file:
seconds	./elements.h	/^	short  seconds;$/;"	m	struct:smpteoffsetElement
sequenceState	./md.h	/^struct sequenceState {$/;"	s
skip_chunk	./midiread.c	/^skip_chunk(struct midistate *msp)$/;"	f	file:
smpteoffsetElement	./elements.h	/^struct smpteoffsetElement {$/;"	s
status	./elements.h	/^	int  status;$/;"	m	struct:sysexElement
subframes	./elements.h	/^	short  subframes;$/;"	m	struct:smpteoffsetElement
sysexElement	./elements.h	/^struct sysexElement {$/;"	s
tempoElement	./elements.h	/^struct tempoElement {$/;"	s
tempo_map	./midiread.c	/^	struct tempomapElement *tempo_map;	\/* The tempo map *\/$/;"	m	struct:midistate	file:
tempomapElement	./elements.h	/^struct tempomapElement {$/;"	s
text	./elements.h	/^	char *text; \/* actual text *\/$/;"	m	struct:textElement
textElement	./elements.h	/^struct textElement {$/;"	s
time_base	./elements.h	/^	short  time_base;	\/* Time base value *\/$/;"	m	struct:rootElement
timesigElement	./elements.h	/^struct timesigElement {$/;"	s
top	./elements.h	/^	short top;		\/* 'top' of timesignature *\/$/;"	m	struct:timesigElement
trackElement	./elements.h	/^struct trackElement {$/;"	s
trackPos	./md.h	/^struct trackPos {$/;"	s
track_count	./midiread.c	/^	int  track_count;	\/* Count of current track *\/$/;"	m	struct:midistate	file:
track_ptrs	./md.h	/^	struct trackPos *track_ptrs; \/* Position pointers *\/$/;"	m	struct:sequenceState
tracks	./elements.h	/^	short  tracks;	\/* Number of tracks *\/$/;"	m	struct:rootElement
type	./elements.h	/^	int  type;	\/* Type of text (lyric, copyright etc) *\/$/;"	m	struct:textElement
type	./elements.h	/^	short	type;			\/* Element type *\/$/;"	m	struct:element
value	./elements.h	/^	short  value;	\/* Controller value *\/$/;"	m	struct:controlElement
vel	./elements.h	/^	short  vel;$/;"	m	struct:noteElement
velocity	./elements.h	/^	int  velocity;$/;"	m	struct:keytouchElement
velocity	./elements.h	/^	int  velocity;$/;"	m	struct:pressureElement
walkFunc	./md.h	/^typedef void (*walkFunc)(struct element *, void *, int);$/;"	t
xform	./midiread.c	/^	xmms_xform_t *xform;		$/;"	m	struct:midistate	file:
xmms_midi_destroy	./midi.c	/^xmms_midi_destroy (xmms_xform_t *xform)$/;"	f	file:
xmms_midi_init	./midi.c	/^static gboolean xmms_midi_init (xmms_xform_t *xform)$/;"	f	file:
xmms_midi_plugin_setup	./midi.c	/^xmms_midi_plugin_setup (xmms_xform_plugin_t *xform_plugin)$/;"	f	file:
xmms_midi_read	./midi.c	/^static gint xmms_midi_read (xmms_xform_t *xform, xmms_sample_t *buf, gint len, xmms_error_t *err)$/;"	f	file:
xmms_midi_seek	./midi.c	/^static gint64 xmms_midi_seek (xmms_xform_t *xform, gint64 samples, xmms_xform_seek_mode_t whence, xmms_error_t *err)$/;"	f	file:
