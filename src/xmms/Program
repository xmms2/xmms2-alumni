target = "xmms2d"
source = ["main.c",
          "sample.c", 
          "config.c",
          "mediainfo.c",
          "sqlite.c",
          "medialib.c", 
          "object.c",
          "error.c",
          "output.c",
          "unixsignal.c",
          "playlist.c",
          "collection.c",
          "collquery.c",
          "collserial.c",
          "ipc.c",
          "log.c",
          "plugin.c",
          "magic.c",
          "ringbuf.c",
          "xform.c",
          "streamtype.c",
          "converter_plugin.c",
          "ringbuf_xform.c",
          "outputplugin.c",
		  "statfs.c",
		  "bindata.c"]

def config(env):
	pluginenv = env.Copy()
	env.Prepend(LIBPATH=["src/lib/xmmsipc"])
	env.Prepend(LIBPATH=["src/lib/xmmssocket"])
	env.Prepend(LIBPATH=["src/lib/xmmstypes"])
	env.Append(LIBS=['xmmsipc'])
	env.Append(LIBS=["xmmssocket"])
	env.Append(LIBS=["xmmstypes"])
	env.Append(CPPPATH=["#src/includepriv"])
	env.pkgconfig("glib-2.0 >= 2.6.0", fail=True)
	env.pkgconfig("gmodule-2.0", fail=True)
	env.pkgconfig("gthread-2.0", fail=True)
	env.pkgconfig("sqlite3", fail=True)

	if env.platform != 'win32':
		env.checklib("m", "sin", fail=True)
	if env.platform == 'sunos5':
		env.checklib("socket", "socket", fail=True)
		env.Append(CPPDEFINES=['_POSIX_PTHREAD_SEMANTICS'])

	try:
		env.checkheader("sys/vfs.h")
		env.Prepend(CPPDEFINES="STATFS_LINUX")
	except ConfigError:
		try:
			env.checkheader("sys/param.h")
			env.Prepend(CPPDEFINES="STATFS_BSD")
		except ConfigError:
			pass

	# we have an xmms2d - we might want plugins!
	pluginenv.handle_targets("Plugin")
